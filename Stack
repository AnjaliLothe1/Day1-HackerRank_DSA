You have an empty sequence, and you will be given  queries. Each query is one of these three types:

1 x  -Push the element x into the stack.
2    -Delete the element present at the top of the stack.
3    -Print the maximum element in the stack.
Function Description

Complete the getMax function in the editor below.

getMax has the following parameters:
- string operations[n]: operations as strings

Returns
- int[]: the answers to each type 3 query

Input Format

The first line of input contains an integer, . The next  lines each contain an above mentioned query.

Constraints

Constraints
1 <= n <= 10^5
1 <= x <= 10^9
1 <= type <= 3
All queries are valid.

Sample Input

STDIN   Function
-----   --------
10      operations[] size n = 10
1 97    operations = ['1 97', '2', '1 20', ....]
2
1 20
2
1 26
1 20
2
3
1 91
3

Sample Output
26
91



====================================================================================================
Solution
====================================================================================================
import java.io.*;
import java.util.*;

public class Solution {
    private static void getMaxElement()
    {
        Stack<Integer> stack = new Stack<Integer>();
        Stack<Integer> maxElement = new Stack<Integer>();
        
        Scanner sc = new Scanner(System.in);
        
        int N = Integer.parseInt(sc.nextLine());
        int temp = 0;
        
        
        
        while(sc.hasNext())
        {
            String type[] = sc.nextLine().split(" ");
            switch(type[0])
            {
                case "1":
                temp = Integer.parseInt(type[1]);
                stack.push(temp);
                 if(maxElement.isEmpty() || maxElement.peek() <= temp)
                     maxElement.push(temp);
                break;
                case "2":
                temp = stack.pop();
                if(temp == maxElement.peek())
                    maxElement.pop();
                break;
                case "3":
                System.out.println(maxElement.peek());
            }
            N--;
        }
        
        while(N-- > 0)
            System.out.println(maxElement.peek());
        
    }
    public static void main(String[] args) {
        getMaxElement();
    }
}
